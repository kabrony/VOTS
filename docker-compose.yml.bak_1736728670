###############################################################################
# Docker Compose (Compose v2+)
# VOTS Multi-Service: 
#   - Python agent (with fastapi + openai + google-genai + chromadb + gradio)
#   - C microservice (optional)
#   - Go microservice (optional)
#   - Next.js Dashboard
#   - Chroma container (image: chromadb/chroma:latest)
#   - local Mongo container (optional)
#
# Keep in mind your .env should contain:
#   OPENAI_API_KEY, GEMINI_API_KEY, MONGO_URI, etc.
# If using DigitalOcean Mongo, just comment out `vots_mongo`.
###############################################################################
services:

  ######################################################################
  # 1) Python Agent
  ######################################################################
  python_agent:
    build:
      context: ./python_agent
      dockerfile: Dockerfile
    container_name: python_agent
    env_file: .env
    networks:
      - vots_network
    ports:
      - "9000:9000"    # FastAPI port
      - "8500:8500"    # Gradio or second UI port
    depends_on:
      - c_service
      - go_service
      - chroma_service
      - vots_mongo

  ######################################################################
  # 2) C Microservice
  ######################################################################
  c_service:
    build:
      context: ./c_service
      dockerfile: Dockerfile
    container_name: c_service
    env_file: .env
    networks:
      - vots_network
    ports:
      - "${C_PORT:-5000}:5000"

  ######################################################################
  # 3) Go Microservice
  ######################################################################
  go_service:
    build:
      context: ./go_service
      dockerfile: Dockerfile
    container_name: go_service
    env_file: .env
    networks:
      - vots_network
    ports:
      - "${GO_PORT:-4000}:4000"

  ######################################################################
  # 4) Next.js Dashboard
  ######################################################################
  nextjs_dashboard:
    build:
      context: ./nextjs_dashboard
      dockerfile: Dockerfile
    container_name: nextjs_dashboard
    env_file: .env
    networks:
      - vots_network
    ports:
      - "${NEXTJS_PORT:-3001}:3000"
    depends_on:
      python_agent:
        condition: service_started

  ######################################################################
  # (Optional) 5) Chroma container
  ######################################################################
  chroma_service:
    image: chromadb/chroma:latest
    container_name: chroma_service
    networks:
      - vots_network
    environment:
      CHROMA_DB_IMPL: "duckdb+parquet"
      CHROMA_PERSIST_DIRECTORY: "/data"
    volumes:
      - chroma_data:/data
    ports:
      - "8000:8000"

  ######################################################################
  # (Optional) 6) local Mongo container
  ######################################################################
  vots_mongo:
    image: mongo:6
    container_name: vots_mongo
    networks:
      - vots_network
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mysecret
    ports:
      - "27017:27017"

networks:
  vots_network:
    name: vots_network
    driver: bridge

volumes:
  chroma_data:
    driver: local
  # If you want a volume for local Mongo data:
  # mongo_data:
  #   driver: local
